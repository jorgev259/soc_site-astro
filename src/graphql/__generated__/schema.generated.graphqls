type Album {
  animations: [Animation]!
  artists: [Artist]!
  avgRating: AvgRating!
  categories: [Category]!
  classifications: [Classification]!
  comments: [Comment]!
  createdAt: Float!
  description: String
  discs: [Disc]!
  downloads: [Download]!
  favorites: Int!
  games: [Game]!
  headerColor: String!
  id: ID!
  isFavorite: Boolean
  label: String
  placeholder: String
  platforms: [Platform]!
  related: [Album]!
  releaseDate: String!
  selfComment: Comment
  selfScore: Int
  status: String!
  stores: [Store]!
  subTitle: String
  title: String!
  updatedAt: Float!
  vgmdb: String
}

type Animation {
  albums(order: [String]): [Album]!
  headerColor: String!
  id: ID!
  placeholder: String
  releaseDate: String
  studios: [Studio]!
  subTitle: String
  title: String
}

type Artist {
  albums: [Album]
  name: String!
  slug: String!
}

input ArtistInput {
  name: String!
  slug: String!
}

type AvgRating {
  score: Float!
  users: Int!
}

type Category {
  albums: [Album]!
  count: Int!
  name: String!
}

type Classification {
  name: String!
}

type Comment {
  album: Album!
  anon: Boolean!
  id: ID!
  text: String!
  username: String
}

type Config {
  name: String!
  value: String
}

type Disc {
  album: Album
  body: String
  id: ID!
  number: Int
  tracks: [String]
}

input DiscInput {
  body: String
  number: Int
}

type Download {
  id: ID!
  links: [Link]
  small: Boolean
  title: String
}

input DownloadInput {
  links: [LinkInput]
  small: Boolean
  title: String
}

type Game {
  albums(order: [String]): [Album]
  headerColor: String!
  name: String
  placeholder: String
  platforms: [Platform]
  publishers: [Publisher]
  releaseDate: String
  series: [Series]
  slug: String!
}

scalar JSON

scalar JSONObject

type Link {
  custom: String
  directUrl: String
  id: ID!
  provider: String
  url: String
}

input LinkInput {
  custom: String
  directUrl: String
  provider: String
  url: String
}

type Mutation {
  addFavorite(albumId: String!): Boolean
  config(name: String!, value: String!): Config!
  createAlbum(animations: [ID], artists: [String], categories: [String], classifications: [String], cover: Upload, description: String, discs: [DiscInput], downloads: [DownloadInput], games: [String], label: String, platforms: [ID], related: [ID], releaseDate: String, request: ID, status: String!, stores: [StoreInput], subTitle: String, title: String, vgmdb: String): Album!
  createAnimation(cover: Upload, releaseDate: String, studios: [String], subTitle: String, title: String): Animation
  createForgorLink(key: String!): Boolean!
  createGame(cover: Upload!, name: String, platforms: [ID], publishers: [ID], releaseDate: String, series: [String], slug: String): Game!
  createPlatform(name: String, type: String!): Platform!
  createPublisher(name: String): Publisher!
  createRole(name: String!, permissions: [String]!): Role
  createSeries(cover: Upload!, name: String, slug: String): Series!
  createStudio(name: String, slug: String): Studio!
  deleteAlbum(id: ID!): Int
  deleteAnimation(id: ID!): Int
  deleteGame(slug: String!): Int
  deletePlatform(key: ID!): Int
  deletePublisher(id: ID!): Int
  deleteRole(name: String!): String
  deleteSeries(slug: String!): Int
  deleteStudio(slug: String!): Int
  deleteUser(username: String!): Int
  editRequest(comments: String, id: ID!, link: String, reason: String, state: String, title: String): Request!
  login(password: String!, username: String!): Int!
  logout: Int!
  rateAlbum(albumId: ID!, score: Int!): Boolean
  registerUser(email: String!, pfp: Upload, username: String!): Boolean!
  rejectRequest(id: ID!, reason: String): Boolean!
  removeFavorite(albumId: String!): Boolean
  selectBanner(name: String!): Int
  submitAlbum(links: String!, request: ID, title: String!, vgmdb: String): Submission!
  updateAlbum(animations: [ID], artists: [String], categories: [String], classifications: [String], cover: Upload, description: String, discs: [DiscInput], downloads: [DownloadInput], games: [String], id: ID!, label: String, platforms: [ID], related: [ID], releaseDate: String, request: ID, status: String!, stores: [StoreInput], subTitle: String, title: String, vgmdb: String): Album!
  updateAnimation(cover: Upload, id: ID!, releaseDate: String, studios: [String], subTitle: String, title: String): Animation
  updateComment(albumId: ID!, anon: Boolean!, text: String!): Boolean
  updateGame(cover: Upload, name: String, platforms: [ID], publishers: [ID], releaseDate: String, series: [String], slug: String): Game!
  updatePass(key: String!, pass: String!): Boolean!
  updatePlatform(key: ID!, name: String, type: String!): Platform!
  updatePublisher(id: ID!, name: String): Publisher!
  updateRole(key: String!, name: String!, permissions: [String]!): Role
  updateSeries(cover: Upload, name: String, slug: String): Series!
  updateStudio(name: String, slug: String): Studio!
  updateUser(email: String, password: String, pfp: Upload, username: String): Boolean!
  updateUserRoles(roles: [String]!, username: String!): Boolean!
  uploadBanner(banner: Upload!): Int
}

type Page {
  perms: [String!]!
  url: String!
}

type Platform {
  albums: [Album]
  games: [Game]!
  id: ID!
  name: String
  type: String!
}

type Publisher {
  games: [Game]
  id: ID!
  name: String
}

type Query {
  album(id: ID): Album
  albumCount: Float!
  albums: [Album!]!
  animation(id: ID): Animation!
  animations: [Animation]!
  artists: [Artist!]!
  banners: [String]!
  categories: [Category]!
  classifications: [Classification]!
  config(name: String): Config
  downloads(id: ID!): [Download]!
  game(slug: String): Game!
  games: [Game!]!
  getRandomAlbum(limit: Int): [Album!]!
  highlight: Album!
  login(password: String!, username: String!): Int!
  me: UserMe
  permissions: [String]!
  platform(id: ID): Platform!
  platforms: [Platform!]!
  publisher(id: ID!): Publisher!
  publishers: [Publisher]!
  recentComments(limit: Int): [Comment]!
  recentPlatforms(limit: Int!, type: [String]!): [Platform]
  recentPublishers(limit: Int!): [Publisher]
  recentSeries(limit: Int!): [Series]
  request(link: String!): Request
  requests(donator: [Boolean]!, state: [String!]): [Request]!
  roles: [Role]!
  searchAlbum(categories: [String], limit: Int, mode: String, offset: Int, order: [String], status: [String!], title: String): SearchAlbumResult
  searchAlbumByArtist(categories: [String], limit: Int, mode: String, name: String!, order: [String], page: Int, status: [String!]): SearchAlbumResult
  searchAnimation(limit: Int, mode: String, order: String, page: Int, title: String): SearchAnimResult
  searchGame(limit: Int, mode: String, name: String, order: String, page: Int): SearchGameResult
  searchPlatformsByCategories(categories: [String]!): [Platform]!
  searchPlatformsByName(categories: [String]!, name: String): [Platform]
  searchPublishersByName(name: String): [Publisher]
  searchRequests(donator: [Boolean!], filter: String, limit: Int, page: Int, state: [String!]): RequestResult!
  searchSeries(limit: Int, mode: String, name: String, order: String, page: Int): SearchSeriesResult
  searchSeriesByName(name: String): [Series]
  searchStudio(limit: Int, mode: String, name: String, order: String, page: Int): SearchStudioResult
  series: [Series]!
  seriesOne(slug: String): Series
  studio(slug: String!): Studio!
  studios: [Studio]!
  submissions(filter: String, state: [String]): [Submission]!
  user(username: String!): User
  users(search: String): [User]!
  vgmdb(url: String!): VgmResult
}

type Request {
  comments: String
  donator: Boolean!
  id: ID!
  link: String
  message: String
  reason: String
  state: String!
  title: String
  user: String
  userID: String
}

type RequestResult {
  count: Int!
  rows: [Request]!
}

type Role {
  name: String!
  permissions: [String]!
}

type SearchAlbumResult {
  count: Int
  rows: [Album]
}

type SearchAnimResult {
  count: Int
  rows: [Animation]
}

type SearchGameResult {
  count: Int
  rows: [Game]
}

type SearchSeriesResult {
  count: Int
  rows: [Series]
}

type SearchStudioResult {
  count: Int
  rows: [Studio]
}

type Series {
  games: [Game]
  headerColor: String!
  name: String
  placeholder: String
  slug: String!
}

type Store {
  id: ID!
  provider: String
  url: String
}

input StoreInput {
  provider: String!
  url: String!
}

type Studio {
  animations: [Animation]!
  name: String
  slug: String!
}

type Submission {
  id: ID!
  links: String
  request: Request
  score: Int!
  state: String!
  submitter: User!
  title: String!
  vgmdb: String
}

scalar Upload

type User {
  comments: [Comment]!
  createdAt: Float!
  favorites: [Album]!
  imgUrl: String!
  pages: [Page]!
  permissions: [String]!
  roles: [Role]!
  username: String!
}

type UserMe {
  comments: [Comment]!
  createdAt: Float!
  email: String!
  favorites: [Album]!
  imgUrl: String!
  pages: [Page]!
  permissions: [String]!
  roles: [Role]!
  username: String!
}

type VGMDBDisc {
  number: Int
  tracks: [String!]
}

type VgmResult {
  artists: [String]!
  categories: [String]!
  classifications: [String]!
  coverUrl: String
  releaseDate: String
  subTitle: String
  title: String
  trackList: [VGMDBDisc]!
}